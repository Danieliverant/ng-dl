import { Directive, ElementRef, EventEmitter, Input, Optional, Output, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { fromEvent, merge, Subject } from 'rxjs';
import { map, takeUntil, tap } from 'rxjs/operators';
import { LocaleService } from './locale.service';
import { getFormattedValue, isAllowedKey, overrideInputType, validate, } from './numeric-input.utils';
export class NumericInputDirective {
    constructor(hostElement, localeService, control) {
        this.hostElement = hostElement;
        this.localeService = localeService;
        this.control = control;
        this.localized = new EventEmitter();
        this.decimalSeparators = this.localeService.getDecimalSeparators();
        this.thousandSeparators = this.localeService.getThousandSeparators();
        this.destroy$ = new Subject();
    }
    ngAfterViewInit() {
        overrideInputType(this.el);
        this.onKeyDown();
        this.onFormSubmit();
        this.onValueChange();
    }
    ngOnDestroy() {
        this.destroy$.next();
    }
    setValue(value) {
        var _a;
        const formattedValue = getFormattedValue(value, this.decimalSeparator, this.thousandsSeparator);
        this.localized.emit(this.localeService.localizeNumber(formattedValue));
        this.el.value = formattedValue.toString();
        console.log(formattedValue);
        if (this.control) {
            (_a = this.control.control) === null || _a === void 0 ? void 0 : _a.patchValue(formattedValue);
        }
    }
    onChange() {
        return fromEvent(this.el, 'change').pipe(map(() => this.el.value));
    }
    onPaste() {
        return fromEvent(this.el, 'paste').pipe(tap((e) => e.preventDefault()), map((e) => { var _a; return ((_a = e.clipboardData) === null || _a === void 0 ? void 0 : _a.getData('text/plain')) || ''; }));
    }
    onDrop() {
        return fromEvent(this.el, 'drop').pipe(tap((e) => e.preventDefault()), map((e) => { var _a; return ((_a = e.dataTransfer) === null || _a === void 0 ? void 0 : _a.getData('text')) || ''; }));
    }
    onKeyDown() {
        fromEvent(this.el, 'keydown')
            .pipe(takeUntil(this.destroy$), tap((e) => {
            this.el.setCustomValidity('');
            if (isAllowedKey(e, this.decimalSeparators)) {
                return;
            }
            e.preventDefault();
        }))
            .subscribe();
    }
    onFormSubmit() {
        fromEvent(this.el.form, 'submit')
            .pipe(takeUntil(this.destroy$), tap((e) => {
            const formattedValue = getFormattedValue(this.el.value, this.decimalSeparator, this.thousandsSeparator);
            const isValid = validate(this.el, formattedValue, this.min, this.max);
            if (!isValid) {
                e.preventDefault();
                this.el.reportValidity();
            }
        }))
            .subscribe();
    }
    onValueChange() {
        merge(this.onChange(), this.onDrop(), this.onPaste())
            .pipe(takeUntil(this.destroy$))
            .subscribe((value) => this.setValue(value));
    }
    get el() {
        return this.hostElement.nativeElement;
    }
    get decimalSeparator() {
        return this.decimalSeparators[0];
    }
    get thousandsSeparator() {
        return this.thousandSeparators[0];
    }
}
NumericInputDirective.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line
                selector: '[dlNumericInput]',
            },] }
];
NumericInputDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: LocaleService },
    { type: NgControl, decorators: [{ type: Optional }] }
];
NumericInputDirective.propDecorators = {
    min: [{ type: Input }],
    max: [{ type: Input }],
    localized: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,